（一）I/O流实现输入输出
  要求；
     1.使用cin/cout必须包含#include<iostream> 及 using namespace std;或者#include<iostream.h>
     2.输入方式一般是：cin>>变量1>>变量2;
         注：输入是提取符后面只能跟变量，不能跟其他表达式。因此，从键盘输入时，两个数据之间默认要用空白符（空格，回车，Tab键）
             所以，这种方式不能输入带空格的字符串，要改用cin.hetline.
     3.输出方式：cout<<表达式1<<表达式2...;        
（二）新增单行注释
  原则：
     1./*....*/方式的注释不能嵌套
     2.//（注释内容为一行）方式可以进行嵌套
     3.//方式下可以嵌套/*....*/注释
     4./*....*/可以嵌套//
（三）使用const定义常量
   一.基本形式：
      const [常量类型] 符号常量名=表达式
   二.要求：
     1.定义是如缺少常量类型，则默认为int型
     2.符号常量定义的最后一定要有分号。这是将定义当做语句处理的。先计算赋值号右边的表达式的值，在将该值初始化该符号常量。
     3.定义的位置可以在函数体外，也可以在函数体内，位置不同则常量的作用域不一样。
     例1：
       #include <iostream.h>
       int main()
       {
         int x=5;
         #define T1 x+x
         #define T2 x-x
         cout<<"T1="<<T1<<"T2="<<T2;
         return o;
       }
       运行结果： T1=10  T2=10   这是因为宏展开时制作简单的替换，实际上T2=x+x-x+x=2x
     例2：
       #include <iostream.h>
       int main()
       {
         int x=5;
         const int T1=x+x
         const int T2=x-x
         cout<<"T1="<<T1<<"T2="<<T2;
         return o;
       }
        运行结果：T1=10 T2=0   因为这时符号常量定义都是计算右边表达式的值，所以T2=0
    三. const与指针的结合
       1.指向常量的指针
          ①定义形式：const 类型名 * 指针名=地址值
          ②示例：
            int x=5；
            const int *p=&x；
          ③可修改：p，x
          ④不可修改：*p
       2.常指针
          ①定义形式：类型名 * const 指针名=地址值
          ②示例：
            int x=5；
            int * const p=&x；
          ③可修改：*p，x
          ④不可修改：p 
       3.指向常量的常指针
          ①定义形式：const 类型名 * const 指针名=地址值
          ②示例：
            int x=5；
            const int * const p=&x；
          ③可修改：x
          ④不可修改：*p，p
          
        
        
        
        
        
        
        
        
        
        
        
